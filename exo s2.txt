Exercice 1 :

int main() {
// Factorielle de N = Nx(N-1)x(N-2)x(N-i)x ... x1
int n = 5;
int factorielle = 0;

int i = n;

if(i == 5) goto debut;
else goto calcul;

debut:
factorielle = n;
i = n-1;

calcul:
if (i > 1){
factorielle = factorielle*i;
i = i-1;
} else factorielle = factorielle*i;

if (i != 1) goto calcul;

  printf("La factorielle de %d est égale à %d\n", n, factorielle);
  return 0;
}

Exercice 2 :

int main() {
// Factorielle de N = Nx(N-1)x(N-2)x(N-i)x ... x1
int n = 5;
int factorielle = 0;

for (int i = n; i>=1;i--){
  
  if(i == 5) 
    factorielle = n;
  else    
  factorielle = factorielle*i;
}
  printf("La factorielle de %d est égale à %d\n", n, factorielle);
  return 0;
}

Exercice 3 :

  int factorielle (int n){
    int val = 0;
    for (int i = n; i>=1;i--){  
    if(i == 5) 
        val = n;
    else    
        val = val*i;
    }
  return val;
  }
  
  int main(){
    int n = 5;
    printf("La factorielle de %d est égale à %d\n", n, factorielle(n));
  }


Exercice 4 :

int factorielle (int n){
   int x = 0;
    if (n == 1)
    {
        x = 1;
        return x;
    }
    else
    {
        x = n * factorielle(n-1); 
        return x;
    }
  }
  
  int main(){
    int n = 5;
    printf("La factorielle de %d est égale à %d\n", n, factorielle(n));
  }

  Exercice 6 :

  #define N 5
// Aide : lire la ième case du tableau e : e[i]
// Aide : affecter la ième case du tableau r : r[i] = valeur;
// Aide : le tableau est accessible de 0 à N – 1, ie de e[0] à e[4] en l’occurrence
// Codez les 3 lignes ici
  
  void mapDouble(int e[], int r[]){
    for(int n=0; n<5; n++){
        r[n]=2*e[n];
    }
}
void mapTriple(int e[], int r[]){
    for(int n=0; n<5; n++){
        r[n]=3*e[n];
    }
}
void mapSquare(int e[], int r[]){
    for(int n=0; n<5; n++){
        r[n]=e[n]*e[n];
    }

}
void mapMaximize3(int e[], int r[]){
    for(int n=0; n<5; n++){
        if(e[n]<3){
            r[n]=e[n];
        }
        else{
            r[n]=3;
        }
    }

}

int main() {
int e[5] = {1, 5, 2, 4, 3};
int r_double[N];
mapDouble(e, r_double); // r_double contiendra {2, 10, 4, 8, 6}
for(int n=0; n<5; n++){
    printf("double[%d] = %d\n", n, r_double[n] );
}
printf("\n");

int r_triple[N];
mapTriple(e, r_triple); // r_triple contiendra {3, 15, 6, 12, 9}
for(int n=0; n<5; n++){
    printf("triple[%d] = %d\n", n, r_triple[n] );
}
printf("\n");
int r_square[N];
mapSquare(e, r_square); // r_square contiendra {1, 25, 4, 16, 9}
for(int n=0; n<5; n++){
    printf("square[%d] = %d\n", n, r_square[n] );
}
printf("\n");
int r_maximize3[N];
mapMaximize3(e, r_maximize3); // r_maximize3 contiendra {1, 3, 2, 3, 3};
for(int n=0; n<5; n++){
    printf("maximize3[%d] = %d\n", n, r_maximize3[n] );
}

}


